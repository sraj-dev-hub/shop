{"version":3,"sources":["assets/banner1.png","banner.png","components/NavBar/Brand.js","components/NavBar/BurgerMenu.js","components/NavBar/CollapseMenu.js","components/NavBar/index.js","pages/home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Brand","LogoContainer","LogoName","Highlight","styled","span","div","Burgermenu","props","Wrapper","onClick","handleNavbar","className","navbarState","CollapseMenu","open","useSpring","CollapseWrapper","style","transform","interpolate","range","output","openValue","NavLinks","children","map","Child","i","key","animated","ul","Navbar","useState","color","setColor","resize","setResize","handleStatusChange","e","isMobile","window","scrollY","screen","height","useEffect","addEventListener","barAnimation","from","linkAnimation","opacity","to","delay","config","wobbly","brandAnimation","FlexContainer","BurgerWrapper","BurgerMenu","NavBar","nav","Home","navbarOpen","setNavbarOpen","href","backgroundImage","banner","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,qC,4ECA3CD,EAAOC,QAAU,IAA0B,oC,seCK3C,IAUeC,EAVD,WACZ,OACE,kBAACC,EAAD,KACE,kBAACC,EAAD,aACO,kBAACC,EAAD,gBAQPD,EAAWE,IAAOC,KAAV,KAMRF,EAAYC,IAAOC,KAAV,KAGTJ,EAAgBG,IAAOE,IAAV,K,kkBCvBnB,IAYeC,EAZI,SAACC,GAClB,OACE,kBAACC,EAAD,CAASC,QAASF,EAAMG,cACtB,yBAAKC,UAAYJ,EAAMK,YAAc,OAAS,IAC5C,sCACA,sCACA,yCAQFJ,EAAUL,IAAOE,IAAV,K,olBCZb,IAyBeQ,EAzBM,SAAAN,GAAU,IACrBO,EAASC,YAAU,CAAED,KAAMP,EAAMK,YAAc,EAAI,IAAnDE,KACR,OAA0B,IAAtBP,EAAMK,YAEN,kBAACI,EAAD,CACEC,MAAO,CACLC,UAAWJ,EACRK,YAAY,CACXC,MAAO,CAAC,EAAG,GAAK,GAAK,GACrBC,OAAQ,CAAC,GAAI,GAAI,GAAI,OAEtBF,aAAY,SAAAG,GAAS,+BAAsBA,EAAtB,cAG1B,kBAACC,EAAD,KACGhB,EAAMiB,SAASC,KAAI,SAACC,EAAOC,GAAR,OAClB,wBAAIC,IAAKD,GAAID,QAMhB,MAKHV,EAAkBb,YAAO0B,IAASxB,IAAhBF,CAAH,KASfoB,EAAWpB,IAAO2B,GAAV,K,siCChCd,IAqEeC,EArEA,SAAAxB,GAAU,IAAD,EACIyB,mBAAS,gBADb,mBACfC,EADe,KACRC,EADQ,OAEMF,mBAAS,aAFf,mBAEfG,EAFe,KAEPC,EAFO,KAItB,SAASC,EAAmBC,GACrBC,aACCC,OAAOC,QAAWD,OAAOE,OAAOC,OAAO,EAAI,IAC7CT,EAAS,SAETA,EAAS,gBAEPM,OAAOC,QAAUD,OAAOE,OAAOC,OAAO,EAAG,IAC3CP,EAAU,UAEVA,EAAU,cAKhBQ,qBAAU,WACRJ,OAAOK,iBAAiB,SAAUR,KAEjC,IAEH,IAAMS,EAAe/B,YAAU,CAC7BgC,KAAM,CAAE7B,UAAW,6BACnBA,UAAW,yBAGP8B,EAAgBjC,YAAU,CAC9BgC,KAAM,CAAE7B,UAAW,0BAA2B+B,QAAS,GACvDC,GAAI,CAAEhC,UAAW,uBAAwB+B,QAAS,GAClDE,MAAO,IACPC,OAAQA,IAAOC,SAGXC,EAAiBvC,YAAU,CAC/BgC,KAAM,CAAE7B,UAAW,yBAA0B+B,QAAS,GACtDC,GAAI,CAAEhC,UAAW,0BAA2B+B,QAAS,GACrDE,MAAO,IACPC,OAAQA,IAAOC,SAEjB,OACE,oCACE,kBAAC,EAAD,CAAQ1C,UAAWsB,EAAOhB,MAAO6B,GAC/B,kBAACS,EAAD,CAAe5C,UAAWwB,GACxB,kBAAC,IAAS9B,IAAV,CAAcY,MAAOqC,GACnB,kBAAC,EAAD,OAGF,kBAAC,EAAD,CAAUrC,MAAO+B,GAAgBzC,EAAMiB,UACvC,kBAACgC,EAAD,KACE,kBAACC,EAAD,CACE7C,YAAaL,EAAMK,YACnBF,aAAcH,EAAMG,kBAK5B,kBAAC,EAAD,CACEE,YAAaL,EAAMK,YACnBF,aAAcH,EAAMG,cAEnBH,EAAMiB,YAQTkC,EAASvD,YAAO0B,IAAS8B,IAAhBxD,CAAH,KASNoD,EAAgBpD,IAAOE,IAAV,KAWbkB,EAAWpB,YAAO0B,IAASC,GAAhB3B,CAAH,KA2BRqD,EAAgBrD,IAAOE,IAAV,K,uBC3FJuD,MA/Bf,WAAiB,IAAD,EACsB5B,oBAAS,GAD/B,mBACP6B,EADO,KACKC,EADL,KAMd,OACE,yBAAKnD,UAAU,YACb,kBAAC,EAAD,CAAQC,YAAaiD,EAAYnD,aANhB,WACnBoD,GAAeD,KAMX,uBAAGE,KAAK,UAAR,QACA,uBAAGA,KAAK,aAAR,YAEF,yBACEpD,UAAU,cACVM,MAAO,CAAE+C,gBAAgB,OAAD,OAASC,IAAT,OAExB,yBAAKtD,UAAU,yBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kBACb,+CACA,qDCbDuD,MARf,WACE,OACE,yBAAKvD,UAAU,OACb,kBAAC,EAAD,QCIcwD,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.efcacdce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner1.ad4f7e41.png\";","module.exports = __webpack_public_path__ + \"static/media/banner.662055c2.png\";","import React from \"react\";\nimport styled from \"styled-components\";\n\n// import logo from \"../../../assets/aero.png\";\n\nconst Brand = () => {\n  return (\n    <LogoContainer>\n      <LogoName>\n        Mask <Highlight>Shop</Highlight>\n      </LogoName>\n    </LogoContainer>\n  );\n};\n\nexport default Brand;\n\nconst LogoName = styled.span`\n  font-size: 24px;\n  font-weight: bold;\n  color: #66b7a1;\n`;\n\nconst Highlight = styled.span`\n  color: #488a78;\n`;\nconst LogoContainer = styled.div`\n  margin: auto 0;\n`;\n","import React from 'react';\nimport styled from \"styled-components\";\n\nconst Burgermenu = (props) => {\n  return (\n    <Wrapper onClick={props.handleNavbar}>\n      <div className={ props.navbarState ? \"open\" : \"\" }>\n        <span>&nbsp;</span>\n        <span>&nbsp;</span>\n        <span>&nbsp;</span>\n      </div>\n    </Wrapper>\n  );\n}\n\nexport default Burgermenu;\n\nconst Wrapper = styled.div`\n  position: relative;\n  padding-top: .7rem;\n  cursor: pointer;\n  display: block;\n\n  & span {\n    background: #757171;\n    display: block;\n    position: relative;\n    width: 2rem;\n    height: .3rem;\n    margin-bottom: .4rem;\n    transition: all ease-in-out 0.2s;\n  }\n\n  .open span:nth-child(2) {\n      opacity: 0;\n    }\n\n  .open span:nth-child(3) {\n    transform: rotate(45deg);\n    top: -11px;\n  }\n\n  .open span:nth-child(1) {\n    transform: rotate(-45deg);\n    top: 11px;\n  }\n\n`;","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useSpring, animated } from \"react-spring\";\n\nconst CollapseMenu = props => {\n  const { open } = useSpring({ open: props.navbarState ? 0 : 1 });\n  if (props.navbarState === true) {\n    return (\n      <CollapseWrapper\n        style={{\n          transform: open\n            .interpolate({\n              range: [0, 0.2, 0.6, 1],\n              output: [0, -20, 0, -200]\n            })\n            .interpolate(openValue => `translate3d(0, ${openValue}px, 0`)\n        }}\n      >\n        <NavLinks>\n          {props.children.map((Child, i) => (\n            <li key={i}>{Child}</li>\n          ))}\n        </NavLinks>\n      </CollapseWrapper>\n    );\n  }\n  return null;\n};\n\nexport default CollapseMenu;\n\nconst CollapseWrapper = styled(animated.div)`\n  background: white;\n  position: fixed;\n  top: 3.5rem;\n  left: 0;\n  right: 0;\n  z-index: 5;\n`;\n\nconst NavLinks = styled.ul`\n  list-style-type: none;\n  padding: 0 1rem 0 2rem;\n\n  & li {\n    transition: all 300ms linear 0s;\n  }\n\n  & a {\n    font-size: 1rem;\n    line-height: 2;\n    color: black;\n    text-transform: uppercase;\n    text-decoration: none;\n    cursor: pointer;\n\n    &:hover {\n      color: #fdcb6e;\n      border-bottom: 1px solid #fdcb6e;\n    }\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useSpring, animated, config } from \"react-spring\";\nimport { isMobile } from \"react-device-detect\";\n\nimport Brand from \"./Brand\";\nimport BurgerMenu from \"./BurgerMenu\";\nimport CollapseMenu from \"./CollapseMenu\";\n\nconst Navbar = props => {\n  const [color, setColor] = useState(\"header-color\");\n  const [resize, setResize] = useState(\"no-resize\");\n\n  function handleStatusChange(e) {\n    if (!isMobile) {\n      if (window.scrollY > (window.screen.height/2 - 150)) {\n        setColor(\"solid\");\n      } else {\n        setColor(\"header-color\");\n      }\n      if (window.scrollY > window.screen.height/2 -150) {\n        setResize(\"resize\");\n      } else {\n        setResize(\"no-resize\");\n      }\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleStatusChange);\n    // setColor(\"transparent\");\n  }, []);\n\n  const barAnimation = useSpring({\n    from: { transform: \"translate3d(0, -10rem, 0)\" },\n    transform: \"translate3d(0, 0, 0)\"\n  });\n\n  const linkAnimation = useSpring({\n    from: { transform: \"translate3d(0, 60px, 0)\", opacity: 0 },\n    to: { transform: \"translate3d(0, 0, 0)\", opacity: 1 },\n    delay: 500,\n    config: config.wobbly\n  });\n\n  const brandAnimation = useSpring({\n    from: { transform: \"translate3d(0, 0px, 0)\", opacity: 0 },\n    to: { transform: \"translate3d(0, 25px, 0)\", opacity: 1 },\n    delay: 200,\n    config: config.wobbly\n  });\n  return (\n    <>\n      <NavBar className={color} style={barAnimation}>\n        <FlexContainer className={resize}>\n          <animated.div style={brandAnimation}>\n            <Brand />\n          </animated.div>\n\n          <NavLinks style={linkAnimation}>{props.children}</NavLinks>\n          <BurgerWrapper>\n            <BurgerMenu\n              navbarState={props.navbarState}\n              handleNavbar={props.handleNavbar}\n            />\n          </BurgerWrapper>\n        </FlexContainer>\n      </NavBar>\n      <CollapseMenu\n        navbarState={props.navbarState}\n        handleNavbar={props.handleNavbar}\n      >\n        {props.children}\n      </CollapseMenu>\n    </>\n  );\n};\n\nexport default Navbar;\n\nconst NavBar = styled(animated.nav)`\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  // font-size: 1.4rem;\n`;\n\nconst FlexContainer = styled.div`\n  max-width: 120rem;\n  display: flex;\n  margin: auto;\n  padding: 0 1rem;\n  justify-content: space-between;\n  height: 5rem;\n \n  }\n`;\n\nconst NavLinks = styled(animated.ul)`\n  justify-self: end;\n  list-style-type: none;\n  margin: auto 0;\n\n\n  & a {\n    color: black;\n    text-transform: uppercase;\n    font-weight: 600;\n    border-bottom: 1px solid transparent;\n    margin: 0 1.5rem;\n    transition: all 300ms linear 0s;\n    text-decoration: none;\n    cursor: pointer;\n\n    &:hover {\n      color: #fdcb6e;\n      border-bottom: 1px solid #fdcb6e;\n    }\n\n    @media (max-width: 768px) {\n      display: none;\n    }\n  }\n`;\n\nconst BurgerWrapper = styled.div`\n  margin: auto 0;\n\n  @media (min-width: 769px) {\n    display: none;\n  }\n`;\n","import React, { useState } from \"react\";\r\nimport Navbar from \"../../components/NavBar\";\r\nimport banner from \"../../assets/banner1.png\";\r\nimport \"./style.css\";\r\n\r\nfunction Home() {\r\n  const [navbarOpen, setNavbarOpen] = useState(false);\r\n  const handleNavbar = () => {\r\n    setNavbarOpen(!navbarOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"continer\">\r\n      <Navbar navbarState={navbarOpen} handleNavbar={handleNavbar}>\r\n        <a href=\"/#home\">Home</a>\r\n        <a href=\"/#gallery\">Contact</a>\r\n      </Navbar>\r\n      <div\r\n        className=\"main_banner\"\r\n        style={{ backgroundImage: `url(${banner})` }}\r\n      >\r\n        <div className=\"container full-height\">\r\n          <div className=\"row full-height\">\r\n            <div className=\"col\">\r\n              <div className=\"banner_content\">\r\n                <h1> Wear the Style</h1>\r\n                <h2>Wear your mask</h2>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport logo from \"./banner.png\";\nimport \"./App.css\";\nimport Home from \"./pages/home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}